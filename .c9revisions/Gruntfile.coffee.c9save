{"ts":1380755396502,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"'use strict'\nmodule.exports = (grunt) ->\n  fs        = require 'fs'\n  glob      = require 'glob'\n  _         = require 'underscore'\n  path      = require 'path'\n  \n  configuration = grunt.file.readJSON('build.json')\n  #each component requires a .coffe file in src and a coffe.md file in spec\n  components  = configuration.build?.components ?[]\n  #non component source files\n  sourceFiles = configuration.build?.sourceFiles ?[]\n\n  for component in components\n    sourceFiles.push \"src/#{component}.coffee\"\n\n  if fs.existsSync('src/head.coffee')\n    sourceFiles.unshift('src/head.coffee')\n\n  if fs.existsSync('src/foot.coffee')\n    sourceFiles.push('src/foot.coffee')\n\n  tests = \"#{configuration.path.tests}/**/*.js\"\n  tasks = \"lib/**/*.js\"\n  links = false\n\n  grunt.initConfig\n    pkg: grunt.file.readJSON('package.json')\n\n    coffee:\n      options:\n        bare: true\n      compile:\n        files:\n          \"lib/module.js\": sourceFiles\n      specs:\n        expand: true\n        cwd: configuration.path.specs\n        src: './**/*.coffee.md'\n        dest: configuration.path.tests\n        ext: '.js'\n\n    simplemocha:\n      options:\n        globals: ['should']\n        timeout: 3000\n        ignoreLeaks: false\n        ui: 'bdd'\n        reporter: 'spec'\n      all:\n        src: tests\n\n    instrument:\n      files: tasks\n      options:\n        lazy: false\n        basePath: \"#{configuration.path.coverage}/instrument/\"\n\n    storeCoverage:\n      options:\n        dir: configuration.path.coverage\n\n    reloadTasks:\n      rootPath: \"#{configuration.path.coverage}/instrument/lib\"\n\n    makeReport:\n      src: \"#{configuration.path.coverage}/**/*.json\"\n      options:\n        type: \"lcov\"\n        dir: \"#{configuration.path.docs}/coverage\"\n        print: \"detail\"\n\n\n    coverage:\n      options:\n        thresholds:\n          'statements': configuration.coverage.statements\n          'branches':   configuration.coverage.branches\n          'lines':      configuration.coverage.lines\n          'functions':  configuration.coverage.functions\n        dir: 'coverage/reports',\n        root: '.'\n\n\n  grunt.loadNpmTasks 'grunt-contrib-coffee'\n  grunt.loadNpmTasks 'grunt-simple-mocha'\n  grunt.loadNpmTasks 'grunt-istanbul-coverage'\n  grunt.loadNpmTasks 'grunt-istanbul'\n\n  grunt.registerTask 'test', ['coffee','simplemocha']\n\n  grunt.registerTask 'default', [\n    'links'\n    'docs'\n    'readme'\n    'coverageReport'\n    'coverage'\n  ]\n\n  grunt.registerTask 'coverageReport', [\n    'coffee'\n    'instrument'\n    'reloadTasks'\n    'simplemocha'\n    'storeCoverage'\n    'makeReport'\n  ]\n\n  grunt.registerTask 'docs', ['links','write-documentation']\n  \n  grunt.registerTask 'links', ->\n    base      = configuration.path.specs\n    extension = configuration.extension.spec\n    files = glob.sync \"#{base}/**/*#{extension}\"\n    \n    grunt.verbose.writeln \"Link files:\"\n    grunt.verbose.writeln files.join(\"\\n\")\n    \n    links =\n      external: ''\n      perDirectory:    {}\n      manual:    ''\n      \n    mdLink = (name,url) -> \"[#{name}]: #{url}\\n\"\n    \n    #get internal links\n    directories = _.uniq( _.map(files, path.dirname) )\n    directories.push '.'\n    for directory in directories \n      links.perDirectory[directory] = ''\n      for file in files\n        name = file\n            .substring(base.length+1,file.length - extension.length)\n            .replace('/','.')\n        links.perDirectory[directory] += mdLink(\n            name, \n            path.relative(directory, file)\n        )\n\n    #get external Links\n    for packageFile in  glob.sync 'node_modules/*/package.json'\n      packageInfo = require \"./#{packageFile}\"\n      linkAdress = packageInfo.homepage ? \"https://npmjs.org/package/#{[packageInfo.name]}\"\n      links.external += mdLink(packageInfo.name, linkAdress)\n    \n    #manualLinks\n    for name,url of configuration.see\n      links.manual += mdLink(name,url)\n    \n  grunt.registerTask 'write-documentation', ->\n    target    = configuration.path.docs\n    base      = configuration.path.specs\n    extension = configuration.extension.spec\n    \n    files = glob.sync \"#{base}/**/*#{extension}\"\n    for directory,specs of _.groupBy(files, path.dirname)\n      targetDirectory = '.'\n      for dir in (target + directory.substring(base.length)).split('/')\n        targetDirectory += \"/#{dir}\"\n        if ! fs.existsSync(targetDirectory)\n          fs.mkdirSync targetDirectory\n      for spec in specs\n        fs.writeFileSync(targetDirectory+'/'+path.basename(spec), [\n            links.external\n            links.perDirectory[directory]\n            links.manual\n            fs.readFileSync(spec).toString()\n          ].join(\"\\n\")\n        )\n\n  grunt.registerTask 'readme', ->\n    packageInfo = require './package.json'\n    readme      = ['']\n    \n    if (!links) \n      grunt.task.run('links')\n    readme.push [links.external, links.manual, links.perDirectory['.']].join(\"\\n\")\n    readme.push fs.readFileSync 'spec/About.coffee.md'\n    readme.push \"\"\"\n      \n      ##Setup\n      Install with npm:\n      ```bash\n      npm install #{packageInfo.name}\n      ```\n      \n      Clone with GIT:\n      ```bash\n      git clone #{packageInfo.repository.url}\n      ```\n      \n      ##Documentation\n      Head here â†’ [#{configuration.path.docs}](#{configuration.path.docs})\n      \n                \"\"\"\n    for dependencyType in ['dependencies', 'devDependencies']\n      if (_.has packageInfo, dependencyType)\n        title = dependencyType.charAt(0).toUpperCase() + dependencyType.slice(1)\n        readme.push \"###{title}\"\n        for name,version of packageInfo[dependencyType]\n          readme.push \" - [#{name}] #{version}\"\n        readme.push('')\n    fs.writeFileSync('README.md', readme.join(\"\\n\"))\n    \n    "]],"start1":0,"start2":0,"length1":0,"length2":5697}]],"length":5697}
{"ts":1380755748127,"patch":[[{"diffs":[[0,"e\"\n\n"],[-1,"  if fs.existsSync('src/head.coffee')\n    sourceFiles.unshift('src/head.coffee')\n\n  if fs.existsSync('src/foot.coffee')\n    sourceFiles.push('src/foot.coffee')\n\n"],[0,"  te"]],"start1":502,"start2":502,"length1":169,"length2":8}]],"length":5536,"saved":false}
