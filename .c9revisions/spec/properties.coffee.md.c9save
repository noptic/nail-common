{"ts":1380445917367,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"properties\n==========\nDefinitions\n-----------\n\n    should      = require 'should'\n    nailCore    = require 'nail-core'\n    properties  = require('../coverage/instrument/lib/module.js').properties\n    _           = require 'underscore'\n    they        = it #more natural language for describing array properties\n\nDescription\n-----------\n\n    describe 'properties', ->\n      it 'is an Object', ->\n        (_.isObject properties).should.be.ok\n\nThe \"aspect\" properties defines which section of the class definition the module handles.\n\n      it 'has a \"aspect\" string\"', ->\n        properties.aspect.should.be.a 'string'\n      \n      it 'its aspect is \"properties\"', ->\n        properties.aspect.should.equal 'properties'\n        \nThis aspect is optional.      \n      \n      it 'does not crash if the class has no properties', ->\n        Person = ->\n        Person.definition = {}\n        properties.augment Person\n\nThe augment function exists...\n\n      it 'has a \"augment\" function', ->\n        (_.isFunction properties.augment).should.be.ok\n\n...and adds properties to the prototype.\n\n      it 'adds a property to a class prototype', ->\n        Person = ->\n        Person.definition =\n          properties:\n            name: 'anon'\n            \n        properties.augment Person\n        x = new Person\n        x.name.should.equal 'anon'\n\nThe module can be used as a nail module.\n\n      it 'can be used as a nail module', ->\n        nail = nailCore.use properties\n        lib = nail.to Person:\n          properties:\n            name: 'anon'\n          \n        x = new lib.Person\n        x.name.should.equal 'anon'\n            \nAnd supports generic commands.\n\n      describe 'supports the generic commands', ->\n        nail = nailCore.use properties\n        lib = nail.to Person:\n          properties:\n            name: 'anon'\n          \n        x = new lib.Person\n        \n        it 'GEN:set', ->\n          x['GEN:set'] 'name', 'whatever'\n          x.name.should.equal 'whatever'\n          \n        it 'GEN:get', ->\n          x.name = 'blub'\n          x['GEN:get']('name').should.equal 'blub'\n      \n          "]],"start1":0,"start2":0,"length1":0,"length2":2108}]],"length":2108}
